# Continuous Integration Workflow for MediaLocate
# This workflow provides comprehensive testing and validation across multiple environments

name: Continuous Integration

# Trigger the workflow on push and pull request events
# Covers main development branches to ensure code quality
on:
  push:
    branches: [ main, master, develop ]  # Key development branches
  pull_request:
    branches: [ main, master, develop ]  # PRs targeting key branches

jobs:
  # Primary testing job: Runs comprehensive tests across multiple environments
  test:
    # Strategy to test across multiple OS and Python versions
    # fail-fast: false ensures all combinations are tested, not stopping on first failure
    strategy:
      fail-fast: false
      matrix:
        # Comprehensive OS and Python version coverage
        os: [ubuntu-latest, windows-latest, macos-latest]  # Cross-platform testing
        python-version: ['3.9', '3.10', '3.11', '3.12']  # Supported Python versions

    # Use the specified OS for each test run
    runs-on: ${{ matrix.os }}

    steps:
    # Step 1: Check out the repository
    - uses: actions/checkout@v3

    # Step 2: Install system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool ffmpeg

    # Step 3: Set up the specific Python version for this test run
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Step 4: Install Poetry for dependency management
    - name: Install Poetry
      uses: snok/install-poetry@v2
      with:
        version: 1.7.1  # Pinned to specific version for consistency
        virtualenvs-create: true  # Create virtual environments
        virtualenvs-in-project: true  # Store venv in project directory

    # Step 5: Cache Poetry dependencies to speed up workflow
    - name: Load cached Poetry virtualenv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv  # Cache virtual environment
        key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # Step 6: Install project dependencies
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # Step 7: Code Quality Checks
    # Linting to ensure code style consistency
    - name: Lint with flake8
      run: poetry run flake8 src

    # Static type checking
    - name: Type check with mypy
      run: poetry run mypy src

    # Security scanning
    - name: Security scan with Bandit
      run: poetry run bandit -r src

    # Step 8: Run unit tests (excluding release validation tests)
    - name: Run unit tests
      run: poetry run pytest tests/ -v --ignore=tests/release_validation

    # Step 9: Generate coverage report
    - name: Generate coverage report
      run: |
        poetry run pytest --cov=medialocate --cov-report=term --cov-report=xml

    # Codecov integration to be added later when token is configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Dedicated job for release validation
  # Runs after primary tests to ensure release readiness
  release-validation:
    needs: test  # Only runs if primary tests pass
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Install system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool ffmpeg

    # Set up Python for release validation
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Use latest Python version

    # Install Poetry
    - name: Install Poetry
      uses: snok/install-poetry@v2

    # Install all dependencies
    - name: Install dependencies
      run: poetry install

    # Run custom release validation script
    - name: Run Release Validation Script
      run: poetry run python scripts/release_validation.py

  # Optional job for dependency security checks
  dependency-security:
    runs-on: ubuntu-latest
    continue-on-error: true  # Make this job optional

    steps:
    - uses: actions/checkout@v3

    # Install system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool ffmpeg

    # Set up Python for dependency checks
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # Install Poetry
    - name: Install Poetry
      uses: snok/install-poetry@v2

    # Install project dependencies
    - name: Install dependencies
      run: poetry install

    # Run Safety to check for known security vulnerabilities
    - name: Run Safety
      run: poetry run safety check

    # Dependency automation disabled for now - can be enabled later if needed
    # - name: Run Dependabot
    #   uses: dependabot/dependabot-core@main
    #   with:
    #     command: update
    #     config-file: .github/dependabot.yml  # Configuration for dependency updates
