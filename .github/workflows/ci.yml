# Continuous Integration Workflow for MediaLocate
# This workflow provides comprehensive testing and validation across multiple environments

name: Continuous Integration

# Trigger the workflow on push and pull request events
# Covers main development branches to ensure code quality
on:
  push:
    branches: [ main ]  # Key development branch
  pull_request:
    branches: [ main ]  # PRs targeting main branch

jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install system dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y exiftool ffmpeg
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install exiftool ffmpeg
          fi
        shell: bash

  test:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-poetry
      with:
        python-version: ${{ matrix.python-version }}
        os: ${{ matrix.os }}

    # Code Quality Checks
    - name: Lint with flake8
      run: poetry run flake8 src

    - name: Type check with mypy
      run: poetry run mypy src

    - name: Security scan with Bandit
      run: poetry run bandit -r src

    # Run unit tests
    - name: Run unit tests
      run: poetry run pytest tests/ -v --ignore=tests/release_validation

    # Generate coverage report
    - name: Generate coverage report
      run: |
        poetry run pytest --cov=medialocate --cov-report=term --cov-report=xml

    # Codecov integration to be added later when token is configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  release-validation:
    needs: [setup, test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-poetry
      with:
        python-version: "3.12"
        os: ubuntu-latest

    - name: Run Release Validation Script
      run: poetry run python scripts/release_validation.py

  dependency-security:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-poetry
      with:
        python-version: "3.12"
        os: ubuntu-latest

    - name: Check dependencies for known security vulnerabilities
      run: poetry run safety check

    # Dependency automation disabled for now - can be enabled later if needed
    # - name: Run Dependabot
    #   uses: dependabot/dependabot-core@main
    #   with:
    #     command: update
    #     config-file: .github/dependabot.yml
