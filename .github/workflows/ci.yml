# Continuous Integration Workflow for MediaLocate
# This workflow provides comprehensive testing and validation across multiple environments

name: CI/CD Pipeline

# Trigger the workflow on push and pull request events
# Covers main development branches to ensure code quality
on:
  push:
    branches: [ main ]  # Key development branch
  pull_request:
    branches: [ main ]  # PRs targeting main branch

jobs:
  build:
    strategy:
      matrix:
        os: [
          # Temporarily disabled for initial setup
          # ubuntu-latest,
          windows-latest,
          # macos-latest
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y exiftool ffmpeg
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install exiftool ffmpeg
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ffmpeg-full exiftool -y
            echo "Verifying installations..."
            echo "Checking installation directories:"
            ls -l "C:/ProgramData/chocolatey/lib/ffmpeg-full/tools/" || echo "FFmpeg tools dir not found"
            ls -l "C:/ProgramData/chocolatey/lib/exiftool/tools/" || echo "ExifTool tools dir not found"

            # Add tools to PATH
            export PATH="/c/ProgramData/chocolatey/lib/ffmpeg-full/tools:/c/ProgramData/chocolatey/lib/exiftool/tools:$PATH"

            echo "FFmpeg location:"
            which ffmpeg || echo "FFmpeg not found by which"
            echo "FFmpeg version:"
            ffmpeg -version || echo "FFmpeg not found in PATH"
            echo "ExifTool location:"
            which exiftool || echo "ExifTool not found by which"
            echo "ExifTool version:"
            exiftool -ver || echo "ExifTool not found in PATH"
            echo "Updated PATH:"
            echo $PATH
          fi
        shell: bash

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [
          # Temporarily disabled for initial setup
          # ubuntu-latest,
          windows-latest,
          # macos-latest
        ]
        python-version: ["3.12"]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-poetry
      with:
        python-version: ${{ matrix.python-version }}
        os: ${{ matrix.os }}

    # Run unit tests
    - name: Run unit tests
      run: poetry run pytest tests/ -v --ignore=tests/release_validation

    # Generate coverage report
    - name: Generate coverage report
      run: poetry run pytest --cov=medialocate --cov-report=term --cov-report=xml

    # Codecov integration to be added later when token is configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  quality:
    needs: build
    strategy:
      matrix:
        os: [
          # Temporarily disabled for initial setup
          # ubuntu-latest,
          windows-latest,
          # macos-latest
        ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-poetry
      with:
        python-version: "3.12"
        os: ${{ matrix.os }}

    # Code Quality Checks
    - name: Lint with flake8
      run: poetry run flake8 src

    - name: Type check with mypy
      run: poetry run mypy src

    - name: Security scan with Bandit
      run: poetry run bandit -r src

    - name: Run Release Validation Script
      run: poetry run python scripts/release_validation.py

    - name: Check dependencies for known security vulnerabilities
      continue-on-error: true
      run: poetry run safety check

    # Dependency automation disabled for now - can be enabled later if needed
    # - name: Run Dependabot
    #   uses: dependabot/dependabot-core@main
    #   with:
    #     command: update
    #     config-file: .github/dependabot.yml
